manifest {
  mainScript = 'main.nf'
}

// default parameters
params {
    cpus = "2"
    memory = '16g'
    help = false
    profile = false
    cachedir = "singularity_images"

    // Inputs (considered as dir)
    ont = './nanopore'
    illumina = './illumina'
    bin_classify = false
    rna = false
    bin_annotate = false

    // Databases
    checkm_db = false
    checkm2db = false
    checkm2db_force_update = false
    //checkm2 database path
    db_path = '/home/user/databases'
    db_file = 'uniref100.KO.1.dmnd'
    checkm_tar_db = false
    sourmash_db = false
    sourmash_db_full = false
    sourmash_db_lineage = false
    // dammit_db = false
    // dammit_user_db = false
    // busco_db = 'metazoa'
    eggnog_db = false

    // Options
    modular = "full" // different option: full ; assemble ; classify ; annotate ; assem-class ; assem-annot ; class-annot
    mode = false
    ont = false
    illumina = false
    skip_ill_qc = false
    skip_ont_qc = false
    short_qc = "2000"
    ont_min_qc = "10"
    model = "r941_min_high_g303"
    polish_threshold = ""
    polish_iteration = 2
    extra_ill = false
    extra_ont = false
    //SRA_ill = false                  a list of additional ill sample from SRA accession number to use for the binning in Metabat2 and concoct (not implemented yet)
    //SRA_ont = false                  a list of additional ont sample from SRA accession number to use for the binning in Metabat2 and concoct (not implemented yet)
    bintool = 'metabat2'
    reassembly = false
    assembler = 'metaspades'
    bining_model = 'pre-trained'
    environment = 'global'
    checkm2db = false
    checkm2_low = false
    reference = false
    modular = 'full'
    skip_bin_sorting = false
    skip_bad_reads_recovery = false
    skip_pilon = false
    quast = false

    // Output
    output = './results'
    runinfodir = "X.Pipeline-runinfo"

}

// runinfo
timeline {
  enabled = false
  file = "${params.output}/${params.runinfodir}/execution_timeline.html"
}

report {
  enabled = false
  file = "${params.output}/${params.runinfodir}/execution_report.html"
}


profiles {
    //executer
    standard {

    }

    test {

    }

    local {
        process.executor = 'local'    
        includeConfig 'configs/local.config'
    }

    gcloud {  // NEED TO CHANGE some DOCKER container to the version used in local_conda
        //workDir = "/tmp/nextflow-docker_pipelines-$USER"
        process.executor = 'google-lifesciences'
        process.memory = params.memory
        bucketDir = 'gs://bucket/work-dir'
        google { project = 'project-name-111111'; zone = 'europe-north1-a' }
        google.lifeSciences.copyImage = 'google/cloud-sdk:latest'
        google.lifeSciences.preemptible = true
        google.lifeSciences.bootDiskSize = "20GB"
        google.lifeSciences.debug = true
        includeConfig 'configs/cloud.config'
        //includeConfig 'configs/preemptible.config' //not used as the gcloud parameter are global
    }

    slurm {
        process.executor = 'slurm'
        includeConfig 'configs/cloud.config'
    }

    //engine
    local_engine {
        docker.enabled=false
        process.memory = params.memory
    }

    conda {
        conda.enabled=true
        docker.enabled=false
        process.memory = params.memory
        conda.createTimeout = '2h'
        channels = ['bioconda', 'conda-forge', 'defaults']
        includeConfig 'configs/conda.config'

    }

    docker {  // NEED TO CHANGE some DOCKER container to the version used in local_conda
        docker.enabled = true 
        process.memory = params.memory
        includeConfig 'configs/container.config'
    }

    singularity { // NEED TO CHANGE some DOCKER container to the version used in local_conda      
        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.cachedir
                envWhitelist = "HTTPS_PROXY,HTTP_PROXY,http_proxy,https_proxy,FTP_PROXY,ftp_proxy"
                cacheDir = params.cachedir
        }
        docker.enabled = false 
        process.memory = params.memory
        includeConfig 'configs/container.config'
    }
}

